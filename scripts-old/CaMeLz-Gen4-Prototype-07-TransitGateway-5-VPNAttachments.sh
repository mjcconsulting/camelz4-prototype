#!/usr/bin/env bash
#
# This is part of a set of scripts to setup a realistic CaMeLz Prototype which uses multiple Accounts, VPCs and
# Transit Gateway to connect them all
#
# You will need to sign up for the "Cisco Cloud Services Router (CSR) 1000V - BYOL for Maximum Performance" Marketplace AMI
# in the Management Account (or the account where you will run simulated customer on-prem locations).
#
# Using words which correspond to the NATO Phonetic Alphabet for simulated company examples (i.e. Alfa, Bravo, Charlie, ..., Zulu)
#
# Some Key Cisco IOS commands you may need:
# - Show File Systems
#   # show file systems
# - Show flash: file system, containing files used for booting, including IOS image files
#   # dir flash:
# - Show nvram: file system, containing the startup-config
#   # dir nvram:
# - Show the running-configuration (what's currently in effect)
#   # show run
# - Enter configuration mode, where you can paste the changes generated by this script to apply them
#   # config t
# - Save the running-config to the startup-config, so the router will use the same configuration after restart
#   # write mem
# - Reload the router (same as a reboot)
#   # reload
# - TBD: A way to copy the startup-config back to your laptop to save a record of it
# - TBD: A way to copy the config to be applied up to the router, then apply it
# - Show interfaces
#   # show ip int br
# - Show BGP Summary
#   #show ip bgp summary
# - Show IP Routes
#   # show ip route



echo "This script has not been tested to run non-interactively. It has no error handling, re-try or restart logic."
echo "You must paste the commands in this script one by one into a terminal, and manually handle errors and re-try."
exit 1

echo "#######################################################################################################################"
echo "## STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP     ##"
echo "#######################################################################################################################"
echo "## All prior scripts in the run order must be run before you run this script                                        ##"
echo "#######################################################################################################################"

#######################################################################################################################
## Transit Gateway VPN Attachments / VPN Connections ##################################################################
#######################################################################################################################

## Ohio Core Alfa LosAngeles VPN Connection to Ohio Core Transit Gateway ##############################################

# Create VPN Options
# - The CLI does not preserve order for the tunnel specifications, unlike the GUI, and sometimes (not always!) switches them.
#   They were switched here, so I'm reversing the order here so the tunnel options are correct in the result.
read -r -d '' ohio_core_alfa_lax_vpn_options << EOF
{
  "TunnelOptions": [{
    "TunnelInsideCidr": "$ohio_core_alfa_lax_vpn_tunnel2_cidr",
    "PreSharedKey": "$ohio_core_alfa_lax_vpn_tunnel2_psk"
  },
  {
    "TunnelInsideCidr": "$ohio_core_alfa_lax_vpn_tunnel1_cidr",
    "PreSharedKey": "$ohio_core_alfa_lax_vpn_tunnel1_psk"
  }]
}
EOF

# Create VPN Connection
profile=$core_profile

ohio_core_alfa_lax_vpn_id=$(aws ec2 create-vpn-connection --transit-gateway-id $ohio_core_tgw_id \
                                                          --customer-gateway-id $ohio_core_alfa_lax_cgw_id \
                                                          --type ipsec.1 \
                                                          --options "$ohio_core_alfa_lax_vpn_options" \
                                                          --tag-specifications ResourceType=vpn-connection,Tags=[{Key=Name,Value=Core-AlfaLosAngelesVpnConnection},{Key=Company,Value=Alfa},{Key=Location,Value=LosAngeles},{Key=Environment,Value=Network},{Key=Project,Value=CaMeLz-POC-4}] \
                                                          --query 'VpnConnection.VpnConnectionId' \
                                                          --profile $profile --region us-east-2 --output text)
echo "ohio_core_alfa_lax_vpn_id=$ohio_core_alfa_lax_vpn_id"

ohio_core_tgw_alfa_lax_vpn_attachment_id=$(aws ec2 describe-transit-gateway-attachments --filters "Name=resource-id,Values=$ohio_core_alfa_lax_vpn_id" \
                                                                                        --query 'TransitGatewayAttachments[0].TransitGatewayAttachmentId' \
                                                                                        --profile $profile --region us-east-2 --output text)
echo "ohio_core_tgw_alfa_lax_vpn_attachment_id=$ohio_core_tgw_alfa_lax_vpn_attachment_id"

aws ec2 create-tags --resources $ohio_core_tgw_alfa_lax_vpn_attachment_id \
                    --tags Key=Name,Value=Core-AlfaLosAngelesVpnTransitGatewayAttachment \
                           Key=Company,Value=Alfa \
                           Key=Environment,Value=Network \
                           Key=Location,Value=LosAngeles \
                           Key=Project,Value=CaMeLz-POC-4 \
                    --profile $profile --region us-east-2 --output text

# Note: We can't trust the order in which the tunnels are returned - the values have been reversed. So, in order to
#       insure the Tunnel Interfaces created on the CSR match the Tunnels as shown in the Console, we have to use the
#       tunnels in the order returned, not in the order specified
tunnel1_outside_ip=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_lax_vpn_id \
                                                      --query 'VpnConnections[0].Options.TunnelOptions[0].OutsideIpAddress' \
                                                      --profile $profile --region us-east-2 --output text)
echo "tunnel1_outside_ip=$tunnel1_outside_ip"
tunnel1_inside_cidr=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_lax_vpn_id \
                                                       --query 'VpnConnections[0].Options.TunnelOptions[0].TunnelInsideCidr' \
                                                       --profile $profile --region us-east-2 --output text)
echo "tunnel1_inside_cidr=$tunnel1_inside_cidr"
tunnel1_psk=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_lax_vpn_id \
                                               --query 'VpnConnections[0].Options.TunnelOptions[0].PreSharedKey' \
                                               --profile $profile --region us-east-2 --output text)
echo "tunnel1_psk=$tunnel1_psk"

tunnel2_outside_ip=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_lax_vpn_id \
                                                      --query 'VpnConnections[0].Options.TunnelOptions[1].OutsideIpAddress' \
                                                      --profile $profile --region us-east-2 --output text)
echo "tunnel2_outside_ip=$tunnel2_outside_ip"
tunnel2_inside_cidr=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_lax_vpn_id \
                                                       --query 'VpnConnections[0].Options.TunnelOptions[1].TunnelInsideCidr' \
                                                       --profile $profile --region us-east-2 --output text)
echo "tunnel2_inside_cidr=$tunnel2_inside_cidr"
tunnel2_psk=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_lax_vpn_id \
                                               --query 'VpnConnections[0].Options.TunnelOptions[1].PreSharedKey' \
                                               --profile $profile --region us-east-2 --output text)
echo "tunnel2_psk=$tunnel2_psk"

## Calculated value, derived from returned values
inside_network=${alfa_lax_vpc_cidr%/*}
inside_netmask=${netmask[${alfa_lax_vpc_cidr#*/}]}
inside_gateway=${inside_network%.*}.$((${inside_network##*.} + 1))

tunnel1_inside_network=${tunnel1_inside_cidr%/*}
tunnel1_inside_netmask=${netmask[${tunnel1_inside_cidr#*/}]}
tunnel1_inside_tgw_ip=${tunnel1_inside_network%.*}.$((${tunnel1_inside_network##*.} + 1))
tunnel1_inside_cgw_ip=${tunnel1_inside_network%.*}.$((${tunnel1_inside_network##*.} + 2))
tunnel2_inside_network=${tunnel2_inside_cidr%/*}
tunnel2_inside_netmask=${netmask[${tunnel2_inside_cidr#*/}]}
tunnel2_inside_tgw_ip=${tunnel2_inside_network%.*}.$((${tunnel2_inside_network##*.} + 1))
tunnel2_inside_cgw_ip=${tunnel2_inside_network%.*}.$((${tunnel2_inside_network##*.} + 2))

tmpfile=$tmpdir/alfa-lax-csr-config-$$.cfg
sed -e "s/@hostname@/alflaxccsr01a/g" \
    -e "s/@tgw_asn@/$ohio_core_tgw_asn/g" \
    -e "s/@cgw_asn@/$alfa_lax_cgw_asn/g" \
    -e "s/@inside_network@/$inside_network/g" \
    -e "s/@inside_netmask@/$inside_netmask/g" \
    -e "s/@inside_gateway@/$inside_gateway/g" \
    -e "s/@tunnel1_outside_ip@/$tunnel1_outside_ip/g" \
    -e "s/@tunnel1_inside_tgw_ip@/$tunnel1_inside_tgw_ip/g" \
    -e "s/@tunnel1_inside_cgw_ip@/$tunnel1_inside_cgw_ip/g" \
    -e "s/@tunnel1_inside_netmask@/$tunnel1_inside_netmask/g" \
    -e "s/@tunnel1_psk@/$tunnel1_psk/g" \
    -e "s/@tunnel2_outside_ip@/$tunnel2_outside_ip/g" \
    -e "s/@tunnel2_inside_tgw_ip@/$tunnel2_inside_tgw_ip/g" \
    -e "s/@tunnel2_inside_cgw_ip@/$tunnel2_inside_cgw_ip/g" \
    -e "s/@tunnel2_inside_netmask@/$tunnel2_inside_netmask/g" \
    -e "s/@tunnel2_psk@/$tunnel2_psk/g" \
    $templatesdir/csr-standard.cfg > $tmpfile

echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "You need to display $tmpfile contents, then ssh into Alfa Los Angeles CSR, config t, then paste config, manually"
echo "Not sure how to automate this configuration upload at this time, as it normally goes up via TFTP"
echo "There may be a way to use a program called expect to automate this eventually, or I'm sure Lambda can do this"
echo "within a custom resource via Node.js. But, for now, paste this manually"

WIP TO DO THIS AUTOMATICALLY
1. List files in flash: filesystem
ssh csra.lax.alfa.camelz.io dir flash:

2. List files in nvram: filesystem
ssh csra.lax.alfa.camelz.io dir nvram:

3. Create a directory to hold uploaded configuration apply files
ssh csra.lax.alfa.camelz.io mkdir flash:apply-configs

4. Upload the generated configuration apply file (A set of commands to run to modify the config, not an actual config)
srcfile=$tmpfile
dstfile=${srcfile##*/} && dstfile=${dstfile%-*}-$(date +%Y%m%d)-apply.cfg
scp $srcfile csra.lax.alfa.camelz.io:flash:/apply-configs/$dstfile

5. Confirm upload
ssh csra.lax.alfa.camelz.io dir flash:apply-configs

6. Apply commands
TBD

7. Show running config
ssh csra.lax.alfa.camelz.io show run

8. Write running config to memory
ssh csra.lax.alfa.camelz.io write mem

9. Copy startup config back to laptop
scp csra.lax.alfa.camelz.io:nvram:startup-config $cfgdir/alfa-lax-csra-startup-config-$(date +%Y%m%d-%H%M).cfg

# Show Ohio Core Alfa LosAngles VPN Connection XML Configuration
# - Note: It's possible to run this through an XSLT transformation to actually write the firewall configuration script
#         allowing for more rapid creation or update of the on-prem firewall. I did play around with this process a
#         while back, using a Cisco ASA, and managed to confirm this was possible.
aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_lax_vpn_id \
                                 --query 'VpnConnections[0].CustomerGatewayConfiguration' \
                                 --profile $profile --region us-east-2 --output text

# Show Ohio Core Alfa LosAngeles VPN Connection Options
aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_lax_vpn_id \
                                 --query 'VpnConnections[0].Options' \
                                 --profile $profile --region us-east-2 --output json

# Show Router Configuraion
# 1. SSH to the router
#    # ssh csra.lax.alfa.camelz.io
#
# 2. Show interfaces
#    # sh ip int br
#    Interface              IP-Address      OK? Method Status                Protocol
#    GigabitEthernet1       172.24.0.15     YES DHCP   up                    up
#    Tunnel1                169.254.10.2    YES NVRAM  up                    up
#    Tunnel2                169.254.11.2    YES NVRAM  up                    up
#    VirtualPortGroup0      192.168.35.101  YES NVRAM  up                    up
#
# 3. Show BGP Summary
#    # show ip bgp summary
#    BGP router identifier 169.254.11.2, local AS number 64768
#    BGP table version is 2, main routing table version 2
#    1 network entries using 248 bytes of memory
#    1 path entries using 136 bytes of memory
#    1/1 BGP path/bestpath attribute entries using 288 bytes of memory
#    0 BGP route-map cache entries using 0 bytes of memory
#    0 BGP filter-list cache entries using 0 bytes of memory
#    BGP using 672 total bytes of memory
#    BGP activity 1/0 prefixes, 1/0 paths, scan interval 60 secs
#    1 networks peaked at 00:15:10 Apr 12 2020 UTC (00:22:44.248 ago)
#
#    Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
#    169.254.10.1    4        64513     137     146        2    0    0 00:22:24        0
#    169.254.11.1    4        64513     137     145        2    0    0 00:22:22        0
#
# 4. Show IP Routes
#    #show ip route
#    Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
#           D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area
#           N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
#           E1 - OSPF external type 1, E2 - OSPF external type 2, m - OMP
#           n - NAT, Ni - NAT inside, No - NAT outside, Nd - NAT DIA
#           i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
#           ia - IS-IS inter area, * - candidate default, U - per-user static route
#           H - NHRP, G - NHRP registered, g - NHRP registration summary
#           o - ODR, P - periodic downloaded static route, l - LISP
#           a - application route
#           + - replicated route, % - next hop override, p - overrides from PfR
#
#    Gateway of last resort is 172.24.0.1 to network 0.0.0.0
#
#    S*    0.0.0.0/0 [1/0] via 172.24.0.1, GigabitEthernet1
#          169.254.0.0/16 is variably subnetted, 4 subnets, 2 masks
#    C        169.254.10.0/30 is directly connected, Tunnel1
#    L        169.254.10.2/32 is directly connected, Tunnel1
#    C        169.254.11.0/30 is directly connected, Tunnel2
#    L        169.254.11.2/32 is directly connected, Tunnel2
#          172.24.0.0/16 is variably subnetted, 3 subnets, 3 masks
#    S        172.24.0.0/24 [1/0] via 172.24.0.1, GigabitEthernet1
#    C        172.24.0.0/27 is directly connected, GigabitEthernet1
#    L        172.24.0.15/32 is directly connected, GigabitEthernet1
#
# 5. Show ISAKMP info
#    # show crypto isakmp sa
#
# 6. Show IPSEC info
#    # show crypto ipsec sa
#



## Ohio Core Alfa Miami VPN Connection to Ohio Core Transit Gateway ###################################################

# Create VPN Options
# - The CLI does not preserve order for the tunnel specifications, unlike the GUI, and sometimes (not always!) switches them.
#   They were NOT switched here, so I'm using the normal order.
read -r -d '' ohio_core_alfa_mia_vpn_options << EOF
{
  "TunnelOptions": [{
    "TunnelInsideCidr": "$ohio_core_alfa_mia_vpn_tunnel1_cidr",
    "PreSharedKey": "$ohio_core_alfa_mia_vpn_tunnel1_psk"
  },
  {
    "TunnelInsideCidr": "$ohio_core_alfa_mia_vpn_tunnel2_cidr",
    "PreSharedKey": "$ohio_core_alfa_mia_vpn_tunnel2_psk"
  }]
}
EOF

# Create VPN Connection
profile=$core_profile

ohio_core_alfa_mia_vpn_id=$(aws ec2 create-vpn-connection --transit-gateway-id $ohio_core_tgw_id \
                                                          --customer-gateway-id $ohio_core_alfa_mia_cgw_id \
                                                          --type ipsec.1 \
                                                          --options "$ohio_core_alfa_mia_vpn_options" \
                                                          --tag-specifications ResourceType=vpn-connection,Tags=[{Key=Name,Value=Core-AlfaMiamiVpnConnection},{Key=Company,Value=Alfa},{Key=Location,Value=Miami},{Key=Environment,Value=Network},{Key=Project,Value=CaMeLz-POC-4}] \
                                                          --query 'VpnConnection.VpnConnectionId' \
                                                          --profile $profile --region us-east-2 --output text)
echo "ohio_core_alfa_mia_vpn_id=$ohio_core_alfa_mia_vpn_id"

ohio_core_tgw_alfa_mia_vpn_attachment_id=$(aws ec2 describe-transit-gateway-attachments --filters "Name=resource-id,Values=$ohio_core_alfa_mia_vpn_id" \
                                                                                        --query 'TransitGatewayAttachments[0].TransitGatewayAttachmentId' \
                                                                                        --profile $profile --region us-east-2 --output text)
echo "ohio_core_tgw_alfa_mia_vpn_attachment_id=$ohio_core_tgw_alfa_mia_vpn_attachment_id"

aws ec2 create-tags --resources $ohio_core_tgw_alfa_mia_vpn_attachment_id \
                    --tags Key=Name,Value=Core-AlfaMiamiVpnTransitGatewayAttachment \
                           Key=Company,Value=Alfa \
                           Key=Environment,Value=Network \
                           Key=Location,Value=Miami \
                           Key=Project,Value=CaMeLz-POC-4 \
                    --profile $profile --region us-east-2 --output text

# Note: We can't trust the order in which the tunnels are returned - the values have been reversed. So, in order to
#       insure the Tunnel Interfaces created on the CSR match the Tunnels as shown in the Console, we have to use the
#       tunnels in the order returned, not in the order specified
tunnel1_outside_ip=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_mia_vpn_id \
                                                      --query 'VpnConnections[0].Options.TunnelOptions[0].OutsideIpAddress' \
                                                      --profile $profile --region us-east-2 --output text)
echo "tunnel1_outside_ip=$tunnel1_outside_ip"
tunnel1_inside_cidr=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_mia_vpn_id \
                                                       --query 'VpnConnections[0].Options.TunnelOptions[0].TunnelInsideCidr' \
                                                       --profile $profile --region us-east-2 --output text)
echo "tunnel1_inside_cidr=$tunnel1_inside_cidr"
tunnel1_psk=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_mia_vpn_id \
                                               --query 'VpnConnections[0].Options.TunnelOptions[0].PreSharedKey' \
                                               --profile $profile --region us-east-2 --output text)
echo "tunnel1_psk=$tunnel1_psk"

tunnel2_outside_ip=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_mia_vpn_id \
                                                      --query 'VpnConnections[0].Options.TunnelOptions[1].OutsideIpAddress' \
                                                      --profile $profile --region us-east-2 --output text)
echo "tunnel2_outside_ip=$tunnel2_outside_ip"
tunnel2_inside_cidr=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_mia_vpn_id \
                                                       --query 'VpnConnections[0].Options.TunnelOptions[1].TunnelInsideCidr' \
                                                       --profile $profile --region us-east-2 --output text)
echo "tunnel2_inside_cidr=$tunnel2_inside_cidr"
tunnel2_psk=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_mia_vpn_id \
                                               --query 'VpnConnections[0].Options.TunnelOptions[1].PreSharedKey' \
                                               --profile $profile --region us-east-2 --output text)
echo "tunnel2_psk=$tunnel2_psk"


## Calculated value, derived from returned values
inside_network=${alfa_mia_vpc_cidr%/*}
inside_netmask=${netmask[${alfa_mia_vpc_cidr#*/}]}
inside_gateway=${inside_network%.*}.$((${inside_network##*.} + 1))

tunnel1_inside_network=${tunnel1_inside_cidr%/*}
tunnel1_inside_netmask=${netmask[${tunnel1_inside_cidr#*/}]}
tunnel1_inside_tgw_ip=${tunnel1_inside_network%.*}.$((${tunnel1_inside_network##*.} + 1))
tunnel1_inside_cgw_ip=${tunnel1_inside_network%.*}.$((${tunnel1_inside_network##*.} + 2))
tunnel2_inside_network=${tunnel2_inside_cidr%/*}
tunnel2_inside_netmask=${netmask[${tunnel2_inside_cidr#*/}]}
tunnel2_inside_tgw_ip=${tunnel2_inside_network%.*}.$((${tunnel2_inside_network##*.} + 1))
tunnel2_inside_cgw_ip=${tunnel2_inside_network%.*}.$((${tunnel2_inside_network##*.} + 2))

tmpfile=$tmpdir/alfa-mia-csr-config-$$.cfg
sed -e "s/@hostname@/alfmiaccsr01a/g" \
    -e "s/@tgw_asn@/$ohio_core_tgw_asn/g" \
    -e "s/@cgw_asn@/$alfa_mia_cgw_asn/g" \
    -e "s/@inside_network@/$inside_network/g" \
    -e "s/@inside_netmask@/$inside_netmask/g" \
    -e "s/@inside_gateway@/$inside_gateway/g" \
    -e "s/@tunnel1_outside_ip@/$tunnel1_outside_ip/g" \
    -e "s/@tunnel1_inside_tgw_ip@/$tunnel1_inside_tgw_ip/g" \
    -e "s/@tunnel1_inside_cgw_ip@/$tunnel1_inside_cgw_ip/g" \
    -e "s/@tunnel1_inside_netmask@/$tunnel1_inside_netmask/g" \
    -e "s/@tunnel1_psk@/$tunnel1_psk/g" \
    -e "s/@tunnel2_outside_ip@/$tunnel2_outside_ip/g" \
    -e "s/@tunnel2_inside_tgw_ip@/$tunnel2_inside_tgw_ip/g" \
    -e "s/@tunnel2_inside_cgw_ip@/$tunnel2_inside_cgw_ip/g" \
    -e "s/@tunnel2_inside_netmask@/$tunnel2_inside_netmask/g" \
    -e "s/@tunnel2_psk@/$tunnel2_psk/g" \
    $templatesdir/csr-standard.cfg > $tmpfile

echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "You need to display $tmpfile contents, then ssh into Alfa Los Angeles CSR, config t, then paste config, manually"
echo "Not sure how to automate this configuration upload at this time, as it normally goes up via TFTP"
echo "There may be a way to use a program called expect to automate this eventually, or I'm sure Lambda can do this"
echo "within a custom resource via Node.js. But, for now, paste this manually"

# Show Ohio Core Alfa Miami VPN Connection XML Configuration
# - Note: It's possible to run this through an XSLT transformation to actually write the firewall configuration script
#         allowing for more rapid creation or update of the on-prem firewall. I did play around with this process a
#         while back, using a Cisco ASA, and managed to confirm this was possible.
aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_mia_vpn_id \
                                 --query 'VpnConnections[0].CustomerGatewayConfiguration' \
                                 --profile $profile --region us-east-2 --output text

# Show Ohio Core Alfa Miami VPN Connection Options
aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_alfa_mia_vpn_id \
                                 --query 'VpnConnections[0].Options' \
                                 --profile $profile --region us-east-2 --output json


## Ohio Core Zulu Dallas VPN Connection to Ohio Core Transit Gateway ##################################################

# Create VPN Options
# - The CLI does not preserve order for the tunnel specifications, unlike the GUI, and sometimes (not always!) switches them.
#   They were NOT switched here, so I'm using the normal order.
read -r -d '' ohio_core_zulu_dfw_vpn_options << EOF
{
  "TunnelOptions": [{
    "TunnelInsideCidr": "$ohio_core_zulu_dfw_vpn_tunnel1_cidr",
    "PreSharedKey": "$ohio_core_zulu_dfw_vpn_tunnel1_psk"
  },
  {
    "TunnelInsideCidr": "$ohio_core_zulu_dfw_vpn_tunnel2_cidr",
    "PreSharedKey": "$ohio_core_zulu_dfw_vpn_tunnel2_psk"
  }]
}
EOF

# Create VPN Connection
profile=$core_profile

ohio_core_zulu_dfw_vpn_id=$(aws ec2 create-vpn-connection --transit-gateway-id $ohio_core_tgw_id \
                                                          --customer-gateway-id $ohio_core_zulu_dfw_cgw_id \
                                                          --type ipsec.1 \
                                                          --options "$ohio_core_zulu_dfw_vpn_options" \
                                                          --tag-specifications ResourceType=vpn-connection,Tags=[{Key=Name,Value=Core-ZuluDallasVpnConnection},{Key=Company,Value=Zulu},{Key=Location,Value=Dallas},{Key=Environment,Value=Network},{Key=Project,Value=CaMeLz-POC-4}] \
                                                          --query 'VpnConnection.VpnConnectionId' \
                                                          --profile $profile --region us-east-2 --output text)
echo "ohio_core_zulu_dfw_vpn_id=$ohio_core_zulu_dfw_vpn_id"

ohio_core_tgw_zulu_dfw_vpn_attachment_id=$(aws ec2 describe-transit-gateway-attachments --filters "Name=resource-id,Values=$ohio_core_zulu_dfw_vpn_id" \
                                                                                        --query 'TransitGatewayAttachments[0].TransitGatewayAttachmentId' \
                                                                                        --profile $profile --region us-east-2 --output text)
echo "ohio_core_tgw_zulu_dfw_vpn_attachment_id=$ohio_core_tgw_zulu_dfw_vpn_attachment_id"

aws ec2 create-tags --resources $ohio_core_tgw_zulu_dfw_vpn_attachment_id \
                    --tags Key=Name,Value=Core-ZuluDallasVpnTransitGatewayAttachment \
                           Key=Company,Value=Zulu \
                           Key=Environment,Value=Network \
                           Key=Location,Value=Dallas \
                           Key=Project,Value=CaMeLz-POC-4 \
                    --profile $profile --region us-east-2 --output text

# Note: We can't trust the order in which the tunnels are returned - the values have been reversed. So, in order to
#       insure the Tunnel Interfaces created on the CSR match the Tunnels as shown in the Console, we have to use the
#       tunnels in the order returned, not in the order specified
tunnel1_outside_ip=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_zulu_dfw_vpn_id \
                                                      --query 'VpnConnections[0].Options.TunnelOptions[0].OutsideIpAddress' \
                                                      --profile $profile --region us-east-2 --output text)
echo "tunnel1_outside_ip=$tunnel1_outside_ip"
tunnel1_inside_cidr=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_zulu_dfw_vpn_id \
                                                       --query 'VpnConnections[0].Options.TunnelOptions[0].TunnelInsideCidr' \
                                                       --profile $profile --region us-east-2 --output text)
echo "tunnel1_inside_cidr=$tunnel1_inside_cidr"
tunnel1_psk=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_zulu_dfw_vpn_id \
                                               --query 'VpnConnections[0].Options.TunnelOptions[0].PreSharedKey' \
                                               --profile $profile --region us-east-2 --output text)
echo "tunnel1_psk=$tunnel1_psk"

tunnel2_outside_ip=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_zulu_dfw_vpn_id \
                                                      --query 'VpnConnections[0].Options.TunnelOptions[1].OutsideIpAddress' \
                                                      --profile $profile --region us-east-2 --output text)
echo "tunnel2_outside_ip=$tunnel2_outside_ip"
tunnel2_inside_cidr=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_zulu_dfw_vpn_id \
                                                       --query 'VpnConnections[0].Options.TunnelOptions[1].TunnelInsideCidr' \
                                                       --profile $profile --region us-east-2 --output text)
echo "tunnel2_inside_cidr=$tunnel2_inside_cidr"
tunnel2_psk=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_zulu_dfw_vpn_id \
                                               --query 'VpnConnections[0].Options.TunnelOptions[1].PreSharedKey' \
                                               --profile $profile --region us-east-2 --output text)
echo "tunnel2_psk=$tunnel2_psk"


## Calculated value, derived from returned values
inside_network=${zulu_dfw_vpc_cidr%/*}
inside_netmask=${netmask[${zulu_dfw_vpc_cidr#*/}]}
inside_gateway=${inside_network%.*}.$((${inside_network##*.} + 1))

tunnel1_inside_network=${tunnel1_inside_cidr%/*}
tunnel1_inside_netmask=${netmask[${tunnel1_inside_cidr#*/}]}
tunnel1_inside_tgw_ip=${tunnel1_inside_network%.*}.$((${tunnel1_inside_network##*.} + 1))
tunnel1_inside_cgw_ip=${tunnel1_inside_network%.*}.$((${tunnel1_inside_network##*.} + 2))
tunnel2_inside_network=${tunnel2_inside_cidr%/*}
tunnel2_inside_netmask=${netmask[${tunnel2_inside_cidr#*/}]}
tunnel2_inside_tgw_ip=${tunnel2_inside_network%.*}.$((${tunnel2_inside_network##*.} + 1))
tunnel2_inside_cgw_ip=${tunnel2_inside_network%.*}.$((${tunnel2_inside_network##*.} + 2))

tmpfile=$tmpdir/zulu-dfw-csr-config-$$.cfg
sed -e "s/@hostname@/zuldfwccsr01a/g" \
    -e "s/@tgw_asn@/$ohio_core_tgw_asn/g" \
    -e "s/@cgw_asn@/$zulu_dfw_cgw_asn/g" \
    -e "s/@inside_network@/$inside_network/g" \
    -e "s/@inside_netmask@/$inside_netmask/g" \
    -e "s/@inside_gateway@/$inside_gateway/g" \
    -e "s/@tunnel1_outside_ip@/$tunnel1_outside_ip/g" \
    -e "s/@tunnel1_inside_tgw_ip@/$tunnel1_inside_tgw_ip/g" \
    -e "s/@tunnel1_inside_cgw_ip@/$tunnel1_inside_cgw_ip/g" \
    -e "s/@tunnel1_inside_netmask@/$tunnel1_inside_netmask/g" \
    -e "s/@tunnel1_psk@/$tunnel1_psk/g" \
    -e "s/@tunnel2_outside_ip@/$tunnel2_outside_ip/g" \
    -e "s/@tunnel2_inside_tgw_ip@/$tunnel2_inside_tgw_ip/g" \
    -e "s/@tunnel2_inside_cgw_ip@/$tunnel2_inside_cgw_ip/g" \
    -e "s/@tunnel2_inside_netmask@/$tunnel2_inside_netmask/g" \
    -e "s/@tunnel2_psk@/$tunnel2_psk/g" \
    $templatesdir/csr-standard.cfg > $tmpfile

echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "You need to display $tmpfile contents, then ssh into Alfa Los Angeles CSR, config t, then paste config, manually"
echo "Not sure how to automate this configuration upload at this time, as it normally goes up via TFTP"
echo "There may be a way to use a program called expect to automate this eventually, or I'm sure Lambda can do this"
echo "within a custom resource via Node.js. But, for now, paste this manually"

# Show Ohio Core Zulu Dallas VPN Connection XML Configuration
# - Note: It's possible to run this through an XSLT transformation to actually write the firewall configuration script
#         allowing for more rapid creation or update of the on-prem firewall. I did play around with this process a
#         while back, using a Cisco ASA, and managed to confirm this was possible.
aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_zulu_dfw_vpn_id \
                                 --query 'VpnConnections[0].CustomerGatewayConfiguration' \
                                 --profile $profile --region us-east-2 --output text

# Show Ohio Core Zulu Dallas VPN Connection Options
aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_zulu_dfw_vpn_id \
                                 --query 'VpnConnections[0].Options' \
                                 --profile $profile --region us-east-2 --output json


## Ohio Core CaMeLz Santa Barbara VPN Connection to Ohio Core Transit Gateway ############################################

# Create VPN Options
# - The CLI does not preserve order for the tunnel specifications, unlike the GUI, and sometimes (not always!) switches them.
#   They were switched here, so I'm reversing the order here so the tunnel options are correct in the result.
#   They were NOT switched here, so I'm using the normal order.
read -r -d '' ohio_core_cml_sba_vpn_options << EOF
{
  "TunnelOptions": [{
    "TunnelInsideCidr": "$ohio_core_cml_sba_vpn_tunnel1_cidr",
    "PreSharedKey": "$ohio_core_cml_sba_vpn_tunnel1_psk"
  },
  {
    "TunnelInsideCidr": "$ohio_core_cml_sba_vpn_tunnel2_cidr",
    "PreSharedKey": "$ohio_core_cml_sba_vpn_tunnel2_psk"
  }]
}
EOF

# Create VPN Connection
profile=$core_profile

ohio_core_cml_sba_vpn_id=$(aws ec2 create-vpn-connection --transit-gateway-id $ohio_core_tgw_id \
                                                         --customer-gateway-id $ohio_core_cml_sba_cgw_id \
                                                         --type ipsec.1 \
                                                         --options "$ohio_core_cml_sba_vpn_options" \
                                                         --tag-specifications ResourceType=vpn-connection,Tags=[{Key=Name,Value=Core-CaMeLzSantaBarbaraVpnConnection},{Key=Company,Value=CaMeLz},{Key=Location,Value=SantaBarbara},{Key=Environment,Value=Network},{Key=Project,Value=CaMeLz-POC-4}] \
                                                         --query 'VpnConnection.VpnConnectionId' \
                                                         --profile $profile --region us-east-2 --output text)
echo "ohio_core_cml_sba_vpn_id=$ohio_core_cml_sba_vpn_id"

ohio_core_tgw_cml_sba_vpn_attachment_id=$(aws ec2 describe-transit-gateway-attachments --filters "Name=resource-id,Values=$ohio_core_cml_sba_vpn_id" \
                                                                                       --query 'TransitGatewayAttachments[0].TransitGatewayAttachmentId' \
                                                                                       --profile $profile --region us-east-2 --output text)
echo "ohio_core_tgw_cml_sba_vpn_attachment_id=$ohio_core_tgw_cml_sba_vpn_attachment_id"

aws ec2 create-tags --resources $ohio_core_tgw_cml_sba_vpn_attachment_id \
                    --tags Key=Name,Value=Core-CaMeLzSantaBarbaraVpnTransitGatewayAttachment \
                           Key=Company,Value=CaMeLz \
                           Key=Environment,Value=Network \
                           Key=Location,Value=SantaBarbara \
                           Key=Project,Value=CaMeLz-POC-4 \
                    --profile $profile --region us-east-2 --output text

# Note: We can't trust the order in which the tunnels are returned - the values have been reversed. So, in order to
#       insure the Tunnel Interfaces created on the CSR match the Tunnels as shown in the Console, we have to use the
#       tunnels in the order returned, not in the order specified
tunnel1_outside_ip=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_cml_sba_vpn_id \
                                                      --query 'VpnConnections[0].Options.TunnelOptions[0].OutsideIpAddress' \
                                                      --profile $profile --region us-east-2 --output text)
echo "tunnel1_outside_ip=$tunnel1_outside_ip"
tunnel1_inside_cidr=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_cml_sba_vpn_id \
                                                       --query 'VpnConnections[0].Options.TunnelOptions[0].TunnelInsideCidr' \
                                                       --profile $profile --region us-east-2 --output text)
echo "tunnel1_inside_cidr=$tunnel1_inside_cidr"
tunnel1_psk=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_cml_sba_vpn_id \
                                               --query 'VpnConnections[0].Options.TunnelOptions[0].PreSharedKey' \
                                               --profile $profile --region us-east-2 --output text)
echo "tunnel1_psk=$tunnel1_psk"

tunnel2_outside_ip=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_cml_sba_vpn_id \
                                                      --query 'VpnConnections[0].Options.TunnelOptions[1].OutsideIpAddress' \
                                                      --profile $profile --region us-east-2 --output text)
echo "tunnel2_outside_ip=$tunnel2_outside_ip"
tunnel2_inside_cidr=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_cml_sba_vpn_id \
                                                       --query 'VpnConnections[0].Options.TunnelOptions[1].TunnelInsideCidr' \
                                                       --profile $profile --region us-east-2 --output text)
echo "tunnel2_inside_cidr=$tunnel2_inside_cidr"
tunnel2_psk=$(aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_cml_sba_vpn_id \
                                               --query 'VpnConnections[0].Options.TunnelOptions[1].PreSharedKey' \
                                               --profile $profile --region us-east-2 --output text)
echo "tunnel2_psk=$tunnel2_psk"


## Calculated value, derived from returned values
inside_network=${cml_sba_vpc_cidr%/*}
inside_netmask=${netmask[${cml_sba_vpc_cidr#*/}]}
inside_gateway=${inside_network%.*}.$((${inside_network##*.} + 1))

tunnel1_inside_network=${tunnel1_inside_cidr%/*}
tunnel1_inside_netmask=${netmask[${tunnel1_inside_cidr#*/}]}
tunnel1_inside_tgw_ip=${tunnel1_inside_network%.*}.$((${tunnel1_inside_network##*.} + 1))
tunnel1_inside_cgw_ip=${tunnel1_inside_network%.*}.$((${tunnel1_inside_network##*.} + 2))
tunnel2_inside_network=${tunnel2_inside_cidr%/*}
tunnel2_inside_netmask=${netmask[${tunnel2_inside_cidr#*/}]}
tunnel2_inside_tgw_ip=${tunnel2_inside_network%.*}.$((${tunnel2_inside_network##*.} + 1))
tunnel2_inside_cgw_ip=${tunnel2_inside_network%.*}.$((${tunnel2_inside_network##*.} + 2))

tmpfile=$tmpdir/cml-sba-csr-config-$$.cfg
sed -e "s/@hostname@/cmlsbaccsr01a/g" \
    -e "s/@tgw_asn@/$ohio_core_tgw_asn/g" \
    -e "s/@cgw_asn@/$cml_sba_cgw_asn/g" \
    -e "s/@inside_network@/$inside_network/g" \
    -e "s/@inside_netmask@/$inside_netmask/g" \
    -e "s/@inside_gateway@/$inside_gateway/g" \
    -e "s/@tunnel1_outside_ip@/$tunnel1_outside_ip/g" \
    -e "s/@tunnel1_inside_tgw_ip@/$tunnel1_inside_tgw_ip/g" \
    -e "s/@tunnel1_inside_cgw_ip@/$tunnel1_inside_cgw_ip/g" \
    -e "s/@tunnel1_inside_netmask@/$tunnel1_inside_netmask/g" \
    -e "s/@tunnel1_psk@/$tunnel1_psk/g" \
    -e "s/@tunnel2_outside_ip@/$tunnel2_outside_ip/g" \
    -e "s/@tunnel2_inside_tgw_ip@/$tunnel2_inside_tgw_ip/g" \
    -e "s/@tunnel2_inside_cgw_ip@/$tunnel2_inside_cgw_ip/g" \
    -e "s/@tunnel2_inside_netmask@/$tunnel2_inside_netmask/g" \
    -e "s/@tunnel2_psk@/$tunnel2_psk/g" \
    $templatesdir/csr-standard.cfg > $tmpfile

echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP"
echo "You need to display $tmpfile contents, then ssh into Alfa Los Angeles CSR, config t, then paste config, manually"
echo "Not sure how to automate this configuration upload at this time, as it normally goes up via TFTP"
echo "There may be a way to use a program called expect to automate this eventually, or I'm sure Lambda can do this"
echo "within a custom resource via Node.js. But, for now, paste this manually"

# Show Ohio Core CaMeLz SantaBarbara VPN Connection XML Configuration
# - Note: It's possible to run this through an XSLT transformation to actually write the firewall configuration script
#         allowing for more rapid creation or update of the on-prem firewall. I did play around with this process a
#         while back, using a Cisco ASA, and managed to confirm this was possible.
aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_cml_sba_vpn_id \
                                 --query 'VpnConnections[0].CustomerGatewayConfiguration' \
                                 --profile $profile --region us-east-2 --output text

# Show Ohio Core CaMeLz SantaBarbara VPN Connection Options
aws ec2 describe-vpn-connections --vpn-connection-ids $ohio_core_cml_sba_vpn_id \
                                 --query 'VpnConnections[0].Options' \
                                 --profile $profile --region us-east-2 --output json
